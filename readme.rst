Students
========

Please see https://space-lab-msu.github.io/MSUGradSpatialEcology


How to use render_site() to create a class website from RMarkdown 
===========================================================

Background
----------

markdown::render_site() is a great tool for quickly converting a folder
of RMarkdown files into a navigable website. It takes an index file
which beomces the home page, a ``_site.yml`` file that defines what the
site navigation (menu) will look like and some other thigns, and a bunch
of Rmd files. It converts all the Rmd to HTML, builds the navigation
based on \_site.yml and puts that in each HTML file, and copies the
whole thing along with any othe rfiles hanging around into a sub folder
you specify. Giithub pages likes to see websites in the /docs folder
that what’s we’ll us. However its simplicity has limitations. All
RMarkdown files must be in the root directory of the project. It will
not look in any subfolders for Rmarkdown files to convert. It will copy
over any subfolder top be part of the website, , but do no conversion.

Organization of this site
-------------------------

-  Labs are RMarkdown files in the top folder. Each lab named lab\_.Rmd
   e.g. ``lab2_scale.Rmd``
-  Data for labs are all in the /data/lab folder. You don’t have to use
   a seperate folder for each lab in the data folder, or even a data
   folder but it makes the site more tidy
-  Output is in the /output folder
-  /docs is where the site is rendered and copied into. It will be
   essentiall almost a mirror of the repo, excpet for the HTML Files.
-  /figure is generated by RMarkdown for plots
-  the Readme and othe rdocs are ReSTructuredText (rst) becuase other
   wise Rmarkdown converts them to HTML and includes them in the site
-  \_site.yml has the site navigation menu in it

Configuration of this site
--------------------------

these are things that are slightly different than defaults or what’s
mentioned in the R help

-  rendered site goes into /docs
-  even Rmd files are copied over so that they can be reviewed by the
   students
-  .rst files are excluded so that github readme can be in the main
   repository but not the site (since github renders .rst as well as
   .md)

editing/adding to the site
--------------------------

-  you may already have everything installed.

-  Copy your Markdown file into the repository folder. it can of course
   be nanmed anything - the lab scheme is just one I did.

-  copy any data needed by the markdown into the /data folder and
   possible in a subfolder /data/lab. Again this is not necessary but
   keeps the root dir tidy.

-  copy any images you want to include in the lab. I put some in the
   /data folder but maybe ther should be an /images folder.

-  Edit the RMarkdown lab files file

   -  rename if you need to
   -  edit and file paths to point to the data folder afrom above since
      it probably won’t be the same as what you copied it from. In lab1
      and lab2 I used a technique
      ``data_path<-file.path("data","lab1")``
   -  edit the paths from which the images you have linked in the
      markdown
   -  to show a link to the original markdown of the file in the
      rendered HTML, put a link that goes to the ``lab1_R.Rmd`` see Lab1
      for an example. The \_site.yml used the include config to make
      sure the Rmd files are copied over (normally they aren’t)

-  add your new lab to \_site.yml

edit the section

::

    navbar:
     title: "MSU Grad Spatial Ecology"
     left:
       - text: "Lab 1: R"
         href: lab1_R.html
       - text: "Lab 2: scale"
         href: lab2_scale.html  

-  add the new lab file with an html extension and any name yuo want to
   show in the nav. Keep it short.

-  re-render the site: ``markdown::render_site()``

-  check it by going into the /docs folder, double click on
   ``index.html`` and open in browser.

downsides
---------

-  it takes forever to render the whole thing everytime. I don’t know of
   a shortcut.
-  there is not a way other than going to github, to have students see
   all the data, etc.
-  when putting a link to Markdown, the browser asks to download it or
   open with Rstudio, Nt to show the markdown in the browser.

One downside to this is that readers (students ) can’t see into the
‘data’ folders unless they clone the repository.
